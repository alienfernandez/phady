/*
+------------------------------------------------------------------------+
| Phady Framework                                                        |
+------------------------------------------------------------------------+
| Copyright (c) 2015                                                     |
+------------------------------------------------------------------------+
| Phady Framework is a complement of Phalcon Framework                   |
|                                                                        |
+------------------------------------------------------------------------+
| Authors: Alien fernandez Fuentes <alienfernandez85@gmail.com>          |
+------------------------------------------------------------------------+
*/

namespace Phady\Core;

/**
  * @class Phady\Core\NamespaceHandler -  Namespaces handlers for app
  *
  * @author  Alien Fern√°ndez Fuentes <alienfernandez85@gmail.com>
  * @package Core
  * @copyright (c) 2015
  * @version 1.0.0
  */
class NamespaceHandler
{

    /**
     * Namespace prefix of the app
     */
    const NS_APP_PREFIX = "App";

    /**
     * @var string scope - Scope of execution [mvc | cli]
     */
    private scope;

    /**
     * @var string rootDir - Root app
     */
    private rootDir;

    /**
     * @var array Array modules default namespace
     */
    private nsModuleDefault;

    /**
     * @var array Array modules default namespace
     */
    public nsModulePathDefault = [];

    /**
     * @var array Array of namespace generated by the app
     */
    private namespaces = [];

    /**
     * @var array Array of modules of the app
     */
    private modules = [];

    /**
     * @param string scope - Scope of execution [mvc | cli]
     * @param string rootDir - Root of the app
     * @param array modules Modules app
     */
    public function __construct(string! scope,string! rootDir, array modules = []) {
        let this->scope = scope;
        let this->rootDir = rootDir;
        let this->modules = modules;
        let this->nsModuleDefault = [
             "", "Controllers", "Models\\Entities", "Models\\Business",
             "Models\\Repositories\\Repository", "Services", "Models\\Repositories"
        ];
        let this->nsModulePathDefault = [
            "", "/controllers", "/models/entities", "/models/business",
            "/models/repositories", "/services", "/models/repositories"
        ];
    }

    /**
     * @function setModulesNamespace - Namespace modify the modules of the app
     */
    public function setModulesNamespace(array! modules) {
        var modKey, key, module, msModule, moduleUcFirst, pathModule;
        for module in modules {
            let modKey = array_keys(module);
            for key, msModule in this->nsModuleDefault {
                if ((this->scope == \Phady\Core\Kernel::SCOPE_MVC) && (key == 0)) {
                    continue;
                }
                let moduleUcFirst = ucfirst(modKey[0]);
                let pathModule = this->rootDir . "/../src/". modKey[0] . this->nsModulePathDefault[key];
                //print_r(pathModule);die;
                //Verify path exists TODO is_dir(pathModule) validate
                //if (is_dir(pathModule)) {
                   let this->namespaces[self::NS_APP_PREFIX . "\\" . moduleUcFirst . "\\" . msModule] = pathModule;
                //}
            }
        }
    }

    /**
     * @function getAllNamespaceApp - Get all the app ns
     */
    public function getAllNamespaceApp() {
        //this->setAppCoreNamespace();
        this->setModulesNamespace(this->modules);
        return this->namespaces;
    }
}
